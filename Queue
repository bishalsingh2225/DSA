	• Most importantly queue is used at two places: 
		○ For single resource sharing: EG: Semaphores are used to control access to a shared device between tasks. Printer is a good example; Spooling is used in printers
		○ For synchronization
	
================================================================ Implementing Queue using an Array
================================================================ In Java
import java.util.*;
class Program1{
public static void main(String []args){
Deque <Integer> dl= new LinkedList<Integer>();
dl.add(1);
dl.addFirst(2);

}
}
================================================================ In C++
	#include<iostream>
	using namespace std;
	struct Queue{
	    int size, cap;
	    int *arr;
	    Queue(int c){
	        cap = c;
	        size = 0;
	        arr= new int[cap];
	    }
	    
	    void enque(int x){
	        arr[size] = x;
	        size++;
	    }
	    void deque(){ //takes big0 of n times
	        for(int i = 1; i<size;i++){
	            arr[i-1]= arr[i];
	        }
	        //update the last element to 0
	        size--;
	    }
	    int getFront(){
	        if(isEmpty()){
	            return -1;
	        }else{
	            return 0; //returns the index of first element
	        }
	    }
	    int getRear(){
	        if(isEmpty()){
	            return -1;
	        }else{
	            return size-1; //returns the index of last element
	        }
	    }
	    bool isFull(){
	        return (size==cap);
	    }
	    bool isEmpty(){
	        return size==0;
	    }
	    int printSize(){
	        return size;
	    }
	};
	
	int main(){
	    struct Queue q1(5); //initializing a structure
	    q1.enque(3);
	    q1.enque(4);
	    q1.enque(5);
	    q1.enque(6);
	    q1.enque(8);
	    cout<<q1.getFront()<<endl;
	    cout<<q1.getRear()<<endl;
	    if(q1.isFull()){
	        cout<<"The Queue is Full"<<endl;
	    }else{
	        cout<<"The Queue is not Full"<<endl;
	    }
	    
	    if(q1.isEmpty()){
	        cout<<"The Queue is Empty"<<endl;
	    }else{
	        cout<<"The Queue is not Empty"<<endl;
	    }
	    cout<<"The size of the Queue is "<<q1.printSize()<<endl;
	    
	    q1.deque();
	    q1.deque();
	    q1.deque();
	    q1.deque();
	    q1.deque();  
	    cout<<"after dequeue"<<endl;
	    cout<<q1.getFront()<<endl;
	    cout<<q1.getRear()<<endl;
	     if(q1.isFull()){
	        cout<<"The Queue is Full"<<endl;
	    }else{
	        cout<<"The Queue is not Full"<<endl;
	    }
	    
	    if(q1.isEmpty()){
	        cout<<"The Queue is Empty"<<endl;
	    }else{
	        cout<<"The Queue is not Empty"<<endl;
	    }
	    cout<<"The size of the Queue is "<<q1.printSize()<<endl;
	    return 0;
	}
	>>>>>>>>>>>>>>….
	0
4
The Queue is Full
The Queue is not Empty
The size of the Queue is 5
after dequeue
-1
-1
The Queue is not Full
The Queue is Empty
The size of the Queue is 0
	
Here all the operations except dequeue() operation, takes big o(1) time. 
================================================================ In Python
queue = []
  
queue.append('a')
queue.append('b')
queue.append('c')
  
print("Initial queue")
print(queue)
  
print("\nElements dequeued from queue")
print(queue.pop(0))
print(queue.pop(0))
print(queue.pop(0))
  
print("\nQueue after removing elements")
print(queue)
================================================================ In JavaScript
<script>
class Queue {

	constructor() {
		this.s1 = [];
		this.s2 = [];
	}

	enQueue(x) {
		this.s1.push(x);
	}
	deQueue() {
		if (this.s1.length == 0 && this.s2.length == 0) {
			console.log("Q is empty");
			exit(0);
		}
		if (this.s2.length == 0) {
			while (this.s1.length != 0) {
				this.s2.push(this.s1[0]);
				this.s1.shift();
			}
		}
		let x = this.s2[0];
		this.s2.shift();
		return x;
	}
};
let q = new Queue;
q.enQueue(1);
q.enQueue(2);
q.enQueue(3);

console.log(q.deQueue());
console.log(q.deQueue());
console.log(q.deQueue());

</script>
